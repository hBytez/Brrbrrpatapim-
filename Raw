-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local LogService = game:GetService("LogService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")
local Debris = game:GetService("Debris")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer and LocalPlayer:WaitForChild("PlayerGui")

-- Settings for remote blocking
local BLOCK_REMOTE_EVENTS = true
local BLOCK_REMOTE_FUNCTIONS = false
local ALLOW_HITBOX = true

-- Central error logging function (enhanced)
local function errorHandler(err)
    local trace = debug.traceback(err, 2)
    warn(string.format("[KAROXNotice Error Handler]: %s\n%s", tostring(err), trace))
    return true -- suppress errors
end

-- Safe spawn wrapper
local function safeSpawn(fn)
    spawn(function()
        local success, err = xpcall(fn, errorHandler)
        if not success then end
    end)
end

-- Suppress global print/warn/error, keep old versions if needed
local oldPrint, oldWarn, oldError = print, warn, error
print = function() end
warn = function() end
error = function() end

LogService.MessageOut:Connect(function(message, messageType)
    if messageType == Enum.MessageType.MessageError
       or messageType == Enum.MessageType.MessageWarning
       or messageType == Enum.MessageType.MessageInfo then
        warn("[LogService Bypass]: " .. message)
    end
end)

-- UI Notification Setup (KAROX Notice)
do
    if PlayerGui:FindFirstChild("KAROXNotice") then
        PlayerGui.KAROXNotice:Destroy()
    end

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "KAROXNotice"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local frame = Instance.new("Frame")
    frame.Name = "NotificationFrame"
    frame.Size = UDim2.new(0, 340, 0, 80)
    frame.AnchorPoint = Vector2.new(0.5, 0)
    frame.Position = UDim2.new(0.5, 0, 0, 20)
    frame.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
    frame.BorderSizePixel = 0
    frame.BackgroundTransparency = 0.05
    frame.Parent = screenGui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = frame

    local outerStroke = Instance.new("UIStroke")
    outerStroke.Thickness = 1
    outerStroke.Color = Color3.new(1, 0, 0)
    outerStroke.Parent = frame

    local icon = Instance.new("ImageLabel")
    icon.Size = UDim2.new(0, 24, 0, 24)
    icon.Position = UDim2.new(0, 12, 0, 4)
    icon.BackgroundTransparency = 1
    icon.Image = "rbxassetid://13686901765"
    icon.Parent = frame

    local iconStroke = Instance.new("UIStroke")
    iconStroke.Thickness = 1
    iconStroke.Color = Color3.new(1, 0, 0)
    iconStroke.Parent = icon

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -54, 0, 20)
    title.Position = UDim2.new(0, 44, 0, 12)
    title.BackgroundTransparency = 1
    title.Font = Enum.Font.GothamBold
    title.Text = "KAROX:"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.TextSize = 19
    title.Parent = frame

    local titleStroke = Instance.new("UIStroke")
    titleStroke.Thickness = 1
    titleStroke.Color = Color3.new(1, 0, 0)
    titleStroke.Parent = title

    local desc = Instance.new("TextLabel")
    desc.Size = UDim2.new(1, -28, 1, -40)
    desc.Position = UDim2.new(0, 14, 0, 34)
    desc.BackgroundTransparency = 1
    desc.Font = Enum.Font.Gotham
    desc.Text = "[KAROX COMBINED ANTI-CHEAT REMOVER IS ACTIVATED. PLEASE WAIT]"
    desc.TextColor3 = Color3.fromRGB(230, 230, 230)
    desc.TextXAlignment = Enum.TextXAlignment.Left
    desc.TextYAlignment = Enum.TextYAlignment.Top
    desc.TextSize = 15
    desc.TextWrapped = true
    desc.Parent = frame

    local descStroke = Instance.new("UIStroke")
    descStroke.Thickness = 1
    descStroke.Color = Color3.new(1, 0, 0)
    descStroke.Parent = desc

    local function createExtraRGBOutline(textLabel)
        local extraOutline = Instance.new("UIStroke")
        extraOutline.Thickness = 2
        extraOutline.Color = Color3.new(1, 0, 0)
        extraOutline.Parent = textLabel
        return extraOutline
    end

    local extraTitleStroke = createExtraRGBOutline(title)
    local extraDescStroke = createExtraRGBOutline(desc)

    local stroke = Instance.new("UIStroke")
    stroke.Thickness = 2
    stroke.Color = Color3.fromRGB(128, 128, 128)
    stroke.Parent = frame

    Debris:AddItem(screenGui, 8)

    -- Camera lock logic during dragging
    local dragToggle = false
    local dragInput, dragStart, startPos
    local Camera = workspace.CurrentCamera
    local cameraLocked = false

    local function unlockCamera()
        if cameraLocked then
            Camera.CameraType = Enum.CameraType.Custom
            if LocalPlayer.Character then
                local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    Camera.CameraSubject = humanoid
                end
            end
            cameraLocked = false
        end
    end

    local function lockCamera()
        if not cameraLocked then
            Camera.CameraType = Enum.CameraType.Scriptable
            cameraLocked = true
        end
    end

    local function update(input)
        local delta = input.Position - dragStart
        local newPos = UDim2.new(
            math.clamp(startPos.X.Scale, 0, 1),
            math.clamp(startPos.X.Offset + delta.X, 0, Camera.ViewportSize.X - frame.AbsoluteSize.X),
            math.clamp(startPos.Y.Scale, 0, 1),
            math.clamp(startPos.Y.Offset + delta.Y, 0, Camera.ViewportSize.Y - frame.AbsoluteSize.Y)
        )
        frame.Position = newPos
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragToggle = true
            dragStart = input.Position
            startPos = frame.Position
            lockCamera()

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                    unlockCamera()
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) and dragToggle then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragToggle then
            update(input)
        elseif input.UserInputState == Enum.UserInputState.End and input == dragInput then
            dragToggle = false
            unlockCamera()
        end
    end)

    -- Restore camera when character respawns to avoid lock sticky
    LocalPlayer.CharacterAdded:Connect(function(character)
        character:WaitForChild("Humanoid", 10)
        unlockCamera()
    end)

    -- RGB cycling loop safely wrapped
    safeSpawn(function()
        local t = 0
        while true do
            local success, err = pcall(function()
                t = t + 0.03
                local r = (math.sin(t) + 1) / 2
                local g = (math.sin(t + 2) + 1) / 2
                local b = (math.sin(t + 4) + 1) / 2
                local color = Color3.new(r, g, b)

                outerStroke.Color = color
                iconStroke.Color = color
                titleStroke.Color = color
                descStroke.Color = color
                extraTitleStroke.Color = color
                extraDescStroke.Color = color

                wait(0.03)
            end)
            if not success then
                warn("[KAROXNotice RGB cycling error]: " .. tostring(err))
                break
            end
        end
    end)

    -- Fade out UI after 4 seconds visible
    delay(4, function()
        safeSpawn(function()
            local tweenInfo = TweenInfo.new(5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local bgColor = Color3.fromRGB(37, 37, 37)

            local fadeTween = TweenService:Create(frame, tweenInfo, {BackgroundTransparency = 1})
            fadeTween:Play()

            local function fadeUI(gui)
                local tw = TweenService:Create(gui, tweenInfo, {TextTransparency = 1, TextStrokeTransparency = 1, BackgroundTransparency = 1})
                tw:Play()
                return tw
            end

            fadeUI(title)
            fadeUI(desc)

            local iconTween = TweenService:Create(icon, tweenInfo, {ImageTransparency = 1})
            iconTween:Play()

            local function fadeStroke(stroke)
                local tw = TweenService:Create(stroke, tweenInfo, {Color = bgColor})
                tw:Play()
                return tw
            end

            fadeStroke(outerStroke)
            fadeStroke(iconStroke)
            fadeStroke(titleStroke)
            fadeStroke(descStroke)
            fadeStroke(extraTitleStroke)
            fadeStroke(extraDescStroke)

            fadeTween.Completed:Wait()
            screenGui:Destroy()
        end)
    end)
end

-- Anti-cheat hooking and bypass logic with safe error handling
safeSpawn(function()
    local getinfo = getinfo or debug.getinfo
    local DEBUG = false
    local Hooked = {}
    local Detected, Kill

    pcall(setthreadidentity, 2)

    for _, v in pairs(getgc and getgc(true) or {}) do
        if typeof(v) == "table" then
            local DetectFunc = rawget(v, "Detected")
            local KillFunc = rawget(v, "Kill")
            if typeof(DetectFunc) == "function" and not Detected then
                Detected = DetectFunc
                local old = hookfunction(Detected, function(Action, Info, NoCrash)
                    pcall(function()
                        if Action ~= "_" and DEBUG then
                            warn("Adonis AntiCheat flagged\nMethod: "..tostring(Action).."\nInfo: "..tostring(Info))
                        end
                    end)
                    return true
                end)
                table.insert(Hooked, Detected)
            end
            if rawget(v, "Variables") and rawget(v, "Process") and typeof(KillFunc) == "function" and not Kill then
                Kill = KillFunc
                local old = hookfunction(Kill, function(Info)
                    pcall(function()
                        if DEBUG then
                            warn("Adonis AntiCheat tried to kill (fallback): ".. tostring(Info))
                        end
                    end)
                end)
                table.insert(Hooked, Kill)
            end
        end
    end

    local env = getrenv and getrenv() or _G
    if env.debug and env.debug.info then
        local OldInfo = env.debug.info
        env.debug.info = newcclosure(function(...)
            local LevelOrFunc, Info = ...
            if Detected and LevelOrFunc == Detected then
                if DEBUG then warn("zins | adonis bypassed") end
                return coroutine.yield(coroutine.running())
            end
            return OldInfo(...)
        end)
    end

    pcall(setthreadidentity, 7)
end)

-- Blocking RemoteEvents and RemoteFunctions as per settings
safeSpawn(function()
    local backoff = 1
    while true do
        local success, err = pcall(function()
            local Remotes = game.ReplicatedStorage:FindFirstChild("Remotes")
            if Remotes then
                local events = Remotes:FindFirstChild("Events")
                if events and events:FindFirstChild("GameManager") then
                    events.GameManager:Destroy()
                end

                if BLOCK_REMOTE_EVENTS or BLOCK_REMOTE_FUNCTIONS then
                    for _, remote in pairs(Remotes:GetDescendants()) do
                        if remote:IsA("RemoteEvent") and BLOCK_REMOTE_EVENTS then
                            remote:Destroy()
                        elseif remote:IsA("RemoteFunction") and BLOCK_REMOTE_FUNCTIONS then
                            remote:Destroy()
                        end
                    end
                end
            end
        end)

        if not success then
            warn("[Remote Blocking Error]: " .. tostring(err))
            backoff = math.min(backoff * 2, 10)
        else
            backoff = 1
        end
        wait(backoff)
    end
end)

-- Disable Points GUI or similar
safeSpawn(function()
    local backoff = 1
    while true do
        local success, err = pcall(function()
            local points = LocalPlayer.PlayerGui:FindFirstChild("Points")
            if points then
                points.Disabled = true
                if points:FindFirstChild("PointsCreator") then
                    points.PointsCreator.Disabled = true
                end
                points:Destroy()
            end

            local starterGui = game:GetService("StarterGui")
            if starterGui:FindFirstChild("Points") then
                starterGui.Points.Disabled = true
                starterGui.Points:Destroy()
            end
            if starterGui:FindFirstChild("PointsCreator") then
                starterGui.PointsCreator.Disabled = true
            end
        end)

        if not success then
            warn("[Points GUI Disable Error]: " .. tostring(err))
            backoff = math.min(backoff * 2, 10)
        else
            backoff = 1
        end
        wait(backoff)
    end
end)

-- Load external bypass scripts with error handling
safeSpawn(function()
    local urls = {
        "https://raw.githubusercontent.com/Exunys/Anti-Kick/main/Anti-Kick.lua",
        "https://pastebin.com/raw/MZrwt5Rm"
    }
    for _, url in ipairs(urls) do
        local success, err = pcall(function()
            local content = game:HttpGet(url)
            local fn = loadstring(content)
            if fn then fn() end
        end)
        if not success then
            warn("[Load Script Error]: " .. tostring(err))
        end
        wait(3)
    end
end)

-- WalkSpeed Bypass Example with metatable hooks
safeSpawn(function()
    while wait(5) do
        local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            pcall(function()
                local mt = getrawmetatable(game)
                local oldIndex = mt.__index
                local oldNewIndex = mt.__newindex
                setreadonly(mt, false)
                mt.__newindex = newcclosure(function(t, k, v)
                    if k == "WalkSpeed" and t == humanoid then
                        return
                    end
                    return oldNewIndex(t, k, v)
                end)
                mt.__index = oldIndex
                setreadonly(mt, true)
            end)
        end
    end
end)

-- CoreGui Detection Bypass
safeSpawn(function()
    for _, gui in pairs(CoreGui:GetChildren()) do
        if gui.Name == "RobloxGui" or gui.Name == "SomeAntiCheatCoreGui" then
            gui:GetPropertyChangedSignal("Enabled"):Connect(function()
                pcall(function()
                    if gui.Enabled == false then
                        gui.Enabled = true
                    end
                end)
            end)
        end
    end
end)

-- BTools Detection Bypass
safeSpawn(function()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    for _, tool in pairs(backpack:GetChildren()) do
        if tool.Name:match("BTools") then
            pcall(function() tool:Destroy() end)
        end
    end
end)

-- gcinfo bypass
safeSpawn(function()
    pcall(function()
        gcinfo = function() return math.random(10000, 20000) end
    end)
end)

-- Humanoid Detection Bypass
safeSpawn(function()
    pcall(function()
        local mt = getrawmetatable(game)
        local oldIndex = mt.__index
        setreadonly(mt, false)
        mt.__index = newcclosure(function(t, k)
            if k == "Humanoid" then
                return nil
            end
            return oldIndex(t, k)
        end)
        setreadonly(mt, true)
    end)
end)

-- FindInstance & InstanceIsA Bypass
safeSpawn(function()
    pcall(function()
        local mt = getrawmetatable(game)
        local oldNameCall = mt.__namecall
        local oldIndex = mt.__index
        setreadonly(mt, false)
        mt.__namecall = newcclosure(function(self, ...)
            local method = getnamecallmethod()
            local args = {...}
            if method == "FindFirstChild" then
                if args[1] and type(args[1]) == "string" and args[1]:lower():find("anticheat") then
                    return nil
                end
            elseif method == "IsA" then
                if tostring(self) == "Humanoid" and args[1] and type(args[1]) == "string" and args[1]:lower():find("humanoid") then
                    return false
                end
            end
            return oldNameCall(self, ...)
        end)

        mt.__index = function(t, k)
            if tostring(k) == "FindFirstChild" then
                return function(self, childName)
                    if childName and type(childName) == "string" and childName:lower():find("anticheat") then
                        return nil
                    end
                    return t.FindFirstChild(self, childName)
                end
            end
            return oldIndex(t, k)
        end
        setreadonly(mt, true)
    end)
end)

return true
